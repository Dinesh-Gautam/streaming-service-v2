services:
  auth-service-migration:
    build:
      context: .
      dockerfile: services/auth-service/Dockerfile
      target: builder
    environment:
      - DATABASE_URL=${DATABASE_URL}
    command: pnpm --filter auth-service run prisma:migrate
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend

  auth-service:
    build:
      context: .
      dockerfile: services/auth-service/Dockerfile
      target: prod
    ports:
      - "3001:3001"
    environment:
      - PORT=3001
    env_file:
      - ./.env
    depends_on:
      - auth-service-migration
      - redis
    networks:
      - backend
      - messaging

  job-service:
    build:
      context: .
      dockerfile: services/job-service/Dockerfile
      target: prod
    ports:
      - "3002:3002"
    environment:
      - PORT=3002
    env_file:
      - ./services/job-service/.env
      - ./.env
    depends_on:
      mongo:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - backend
      - messaging

  thumbnail-worker:
    build:
      context: .
      dockerfile: services/thumbnail-worker/Dockerfile
      target: prod
    environment:
      - PORT=3003
    env_file:
      - ./.env
    depends_on:
      mongo:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - backend
      - messaging
    volumes:
      - ${LOCAL_SOURCE_PATH}:${LOCAL_STORAGE_PATH}

  subtitle-worker:
    build:
      context: .
      dockerfile: services/subtitle-worker/Dockerfile
      target: prod
    environment:
      - PORT=3004
    env_file:
      - ./.env
    depends_on:
      mongo:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - backend
      - messaging
    volumes:
      - ${LOCAL_GOOGLE_APPLICATION_CREDS_PATH}:${GOOGLE_APPLICATION_CREDENTIALS}:ro
      - ${LOCAL_SOURCE_PATH}:${LOCAL_STORAGE_PATH}

  ai-worker:
    build:
      context: .
      dockerfile: services/ai-worker/Dockerfile
      target: prod
    ports:
      - "3005:3005"
    environment:
      - PORT=3005
    env_file:
      - ./.env
    depends_on:
      mongo:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - backend
      - messaging
    volumes:
      - ${LOCAL_GOOGLE_APPLICATION_CREDS_PATH}:${GOOGLE_APPLICATION_CREDENTIALS}:ro
      - ${LOCAL_SOURCE_PATH}:${LOCAL_STORAGE_PATH}

  transcoding-worker:
    build:
      context: .
      dockerfile: services/transcoding-worker/Dockerfile
      target: prod
    environment:
      - PORT=3006
    env_file:
      - ./.env
    depends_on:
      mongo:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - backend
      - messaging
    volumes:
      - ${LOCAL_SOURCE_PATH}:${LOCAL_STORAGE_PATH}

  mongo:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - backend

  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - messaging

  postgres:
    image: postgres:13
    restart: always
    environment:
      - POSTGRES_USER=test
      - POSTGRES_PASSWORD=test
      - POSTGRES_DB=test-db
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test -d test-db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      - backend

  redis:
    image: redis:alpine
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

networks:
  backend:
  messaging:

volumes:
  mongo-data:
  postgres_data:
  redis_data:
