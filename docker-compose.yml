version: "3.9"

x-service-base: &service-base
  tty: true
  stdin_open: true
  restart: unless-stopped
  volumes:
    - pnpm-store:/pnpm/store
  develop:
    watch:
      - action: sync
        path: ./packages
        target: /usr/src/app/packages
        ignore: [node_modules/]

services:
  # ---------- DATABASES & BROKERS ----------
  postgres:
    image: postgres:13
    restart: unless-stopped
    environment:
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
      POSTGRES_DB: test-db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test -d test-db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      - backend

  mongo:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - backend

  redis:
    image: redis:alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - messaging

  # ---------- SERVICES ----------
  auth-service-migration:
    build:
      context: .
      dockerfile: services/auth-service/Dockerfile
      target: builder
    environment:
      DATABASE_URL: ${DATABASE_URL}
    command: pnpm --filter auth-service run prisma:migrate
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend

  auth-service:
    <<: *service-base
    build:
      context: .
      dockerfile: services/auth-service/Dockerfile
      target: dev
    ports:
      - "${AUTH_SERVICE_PORT}:${AUTH_SERVICE_PORT}"
    env_file:
      - ./.env
      - ./services/auth-service/.env
    develop:
      watch:
        - action: sync
          path: ./services/auth-service/src
          target: /usr/src/app/services/auth-service/src
          ignore: [node_modules/]
        - action: rebuild
          path: ./services/auth-service/package.json
    depends_on:
      - auth-service-migration
      - redis
    networks:
      - backend
      - messaging

  job-service:
    <<: *service-base
    build:
      context: .
      dockerfile: services/job-service/Dockerfile
      target: dev
    ports:
      - "${JOB_SERVICE_PORT}:${JOB_SERVICE_PORT}"
    env_file:
      - ./.env
      - ./services/job-service/.env
    develop:
      watch:
        - action: sync
          path: ./services/job-service/src
          target: /usr/src/app/services/job-service/src
          ignore: [node_modules/]
        - action: rebuild
          path: ./services/job-service/package.json
    depends_on:
      mongo:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - backend
      - messaging

  thumbnail-worker:
    <<: *service-base
    profiles: ["workers"] # Only run when needed
    build:
      context: .
      dockerfile: services/thumbnail-worker/Dockerfile
      target : dev
    develop:
      watch:
        - action: sync
          path: ./services/thumbnail-worker/src
          target: /usr/src/app/services/thumbnail-worker/src
          ignore: [node_modules/]
        - action: rebuild
          path: ./services/thumbnail-worker/package.json
    env_file:
      - ./.env
      - ./services/thumbnail-worker/.env
    depends_on:
      mongo:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - backend
      - messaging

# ---------- NETWORKS ----------
networks:
  backend:
  messaging:

# ---------- VOLUMES ----------
volumes:
  mongo-data:
  postgres_data:
  redis_data:
  pnpm-store:
